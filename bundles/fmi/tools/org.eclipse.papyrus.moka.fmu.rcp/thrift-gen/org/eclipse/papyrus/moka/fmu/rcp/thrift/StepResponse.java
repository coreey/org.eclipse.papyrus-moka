/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.eclipse.papyrus.moka.fmu.rcp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-24")
public class StepResponse implements org.apache.thrift.TBase<StepResponse, StepResponse._Fields>, java.io.Serializable, Cloneable, Comparable<StepResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FMI_REALS_FIELD_DESC = new org.apache.thrift.protocol.TField("fmiReals", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField FMI_INTEGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("fmiIntegers", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField FMI_BOOLEANS_FIELD_DESC = new org.apache.thrift.protocol.TField("fmiBooleans", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField FMI_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("fmiStrings", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StepResponseTupleSchemeFactory());
  }

  private Status status; // required
  private Map<Integer,Double> fmiReals; // required
  private Map<Integer,Integer> fmiIntegers; // required
  private Map<Integer,Boolean> fmiBooleans; // required
  private Map<Integer,String> fmiStrings; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Status
     */
    STATUS((short)1, "status"),
    FMI_REALS((short)3, "fmiReals"),
    FMI_INTEGERS((short)4, "fmiIntegers"),
    FMI_BOOLEANS((short)5, "fmiBooleans"),
    FMI_STRINGS((short)6, "fmiStrings");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 3: // FMI_REALS
          return FMI_REALS;
        case 4: // FMI_INTEGERS
          return FMI_INTEGERS;
        case 5: // FMI_BOOLEANS
          return FMI_BOOLEANS;
        case 6: // FMI_STRINGS
          return FMI_STRINGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
    tmpMap.put(_Fields.FMI_REALS, new org.apache.thrift.meta_data.FieldMetaData("fmiReals", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.FMI_INTEGERS, new org.apache.thrift.meta_data.FieldMetaData("fmiIntegers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.FMI_BOOLEANS, new org.apache.thrift.meta_data.FieldMetaData("fmiBooleans", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.FMI_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("fmiStrings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepResponse.class, metaDataMap);
  }

  public StepResponse() {
  }

  public StepResponse(
    Status status,
    Map<Integer,Double> fmiReals,
    Map<Integer,Integer> fmiIntegers,
    Map<Integer,Boolean> fmiBooleans,
    Map<Integer,String> fmiStrings)
  {
    this();
    this.status = status;
    this.fmiReals = fmiReals;
    this.fmiIntegers = fmiIntegers;
    this.fmiBooleans = fmiBooleans;
    this.fmiStrings = fmiStrings;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepResponse(StepResponse other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetFmiReals()) {
      Map<Integer,Double> __this__fmiReals = new HashMap<Integer,Double>(other.fmiReals);
      this.fmiReals = __this__fmiReals;
    }
    if (other.isSetFmiIntegers()) {
      Map<Integer,Integer> __this__fmiIntegers = new HashMap<Integer,Integer>(other.fmiIntegers);
      this.fmiIntegers = __this__fmiIntegers;
    }
    if (other.isSetFmiBooleans()) {
      Map<Integer,Boolean> __this__fmiBooleans = new HashMap<Integer,Boolean>(other.fmiBooleans);
      this.fmiBooleans = __this__fmiBooleans;
    }
    if (other.isSetFmiStrings()) {
      Map<Integer,String> __this__fmiStrings = new HashMap<Integer,String>(other.fmiStrings);
      this.fmiStrings = __this__fmiStrings;
    }
  }

  public StepResponse deepCopy() {
    return new StepResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.fmiReals = null;
    this.fmiIntegers = null;
    this.fmiBooleans = null;
    this.fmiStrings = null;
  }

  /**
   * 
   * @see Status
   */
  public Status getStatus() {
    return this.status;
  }

  /**
   * 
   * @see Status
   */
  public void setStatus(Status status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getFmiRealsSize() {
    return (this.fmiReals == null) ? 0 : this.fmiReals.size();
  }

  public void putToFmiReals(int key, double val) {
    if (this.fmiReals == null) {
      this.fmiReals = new HashMap<Integer,Double>();
    }
    this.fmiReals.put(key, val);
  }

  public Map<Integer,Double> getFmiReals() {
    return this.fmiReals;
  }

  public void setFmiReals(Map<Integer,Double> fmiReals) {
    this.fmiReals = fmiReals;
  }

  public void unsetFmiReals() {
    this.fmiReals = null;
  }

  /** Returns true if field fmiReals is set (has been assigned a value) and false otherwise */
  public boolean isSetFmiReals() {
    return this.fmiReals != null;
  }

  public void setFmiRealsIsSet(boolean value) {
    if (!value) {
      this.fmiReals = null;
    }
  }

  public int getFmiIntegersSize() {
    return (this.fmiIntegers == null) ? 0 : this.fmiIntegers.size();
  }

  public void putToFmiIntegers(int key, int val) {
    if (this.fmiIntegers == null) {
      this.fmiIntegers = new HashMap<Integer,Integer>();
    }
    this.fmiIntegers.put(key, val);
  }

  public Map<Integer,Integer> getFmiIntegers() {
    return this.fmiIntegers;
  }

  public void setFmiIntegers(Map<Integer,Integer> fmiIntegers) {
    this.fmiIntegers = fmiIntegers;
  }

  public void unsetFmiIntegers() {
    this.fmiIntegers = null;
  }

  /** Returns true if field fmiIntegers is set (has been assigned a value) and false otherwise */
  public boolean isSetFmiIntegers() {
    return this.fmiIntegers != null;
  }

  public void setFmiIntegersIsSet(boolean value) {
    if (!value) {
      this.fmiIntegers = null;
    }
  }

  public int getFmiBooleansSize() {
    return (this.fmiBooleans == null) ? 0 : this.fmiBooleans.size();
  }

  public void putToFmiBooleans(int key, boolean val) {
    if (this.fmiBooleans == null) {
      this.fmiBooleans = new HashMap<Integer,Boolean>();
    }
    this.fmiBooleans.put(key, val);
  }

  public Map<Integer,Boolean> getFmiBooleans() {
    return this.fmiBooleans;
  }

  public void setFmiBooleans(Map<Integer,Boolean> fmiBooleans) {
    this.fmiBooleans = fmiBooleans;
  }

  public void unsetFmiBooleans() {
    this.fmiBooleans = null;
  }

  /** Returns true if field fmiBooleans is set (has been assigned a value) and false otherwise */
  public boolean isSetFmiBooleans() {
    return this.fmiBooleans != null;
  }

  public void setFmiBooleansIsSet(boolean value) {
    if (!value) {
      this.fmiBooleans = null;
    }
  }

  public int getFmiStringsSize() {
    return (this.fmiStrings == null) ? 0 : this.fmiStrings.size();
  }

  public void putToFmiStrings(int key, String val) {
    if (this.fmiStrings == null) {
      this.fmiStrings = new HashMap<Integer,String>();
    }
    this.fmiStrings.put(key, val);
  }

  public Map<Integer,String> getFmiStrings() {
    return this.fmiStrings;
  }

  public void setFmiStrings(Map<Integer,String> fmiStrings) {
    this.fmiStrings = fmiStrings;
  }

  public void unsetFmiStrings() {
    this.fmiStrings = null;
  }

  /** Returns true if field fmiStrings is set (has been assigned a value) and false otherwise */
  public boolean isSetFmiStrings() {
    return this.fmiStrings != null;
  }

  public void setFmiStringsIsSet(boolean value) {
    if (!value) {
      this.fmiStrings = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    case FMI_REALS:
      if (value == null) {
        unsetFmiReals();
      } else {
        setFmiReals((Map<Integer,Double>)value);
      }
      break;

    case FMI_INTEGERS:
      if (value == null) {
        unsetFmiIntegers();
      } else {
        setFmiIntegers((Map<Integer,Integer>)value);
      }
      break;

    case FMI_BOOLEANS:
      if (value == null) {
        unsetFmiBooleans();
      } else {
        setFmiBooleans((Map<Integer,Boolean>)value);
      }
      break;

    case FMI_STRINGS:
      if (value == null) {
        unsetFmiStrings();
      } else {
        setFmiStrings((Map<Integer,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case FMI_REALS:
      return getFmiReals();

    case FMI_INTEGERS:
      return getFmiIntegers();

    case FMI_BOOLEANS:
      return getFmiBooleans();

    case FMI_STRINGS:
      return getFmiStrings();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case FMI_REALS:
      return isSetFmiReals();
    case FMI_INTEGERS:
      return isSetFmiIntegers();
    case FMI_BOOLEANS:
      return isSetFmiBooleans();
    case FMI_STRINGS:
      return isSetFmiStrings();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepResponse)
      return this.equals((StepResponse)that);
    return false;
  }

  public boolean equals(StepResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_fmiReals = true && this.isSetFmiReals();
    boolean that_present_fmiReals = true && that.isSetFmiReals();
    if (this_present_fmiReals || that_present_fmiReals) {
      if (!(this_present_fmiReals && that_present_fmiReals))
        return false;
      if (!this.fmiReals.equals(that.fmiReals))
        return false;
    }

    boolean this_present_fmiIntegers = true && this.isSetFmiIntegers();
    boolean that_present_fmiIntegers = true && that.isSetFmiIntegers();
    if (this_present_fmiIntegers || that_present_fmiIntegers) {
      if (!(this_present_fmiIntegers && that_present_fmiIntegers))
        return false;
      if (!this.fmiIntegers.equals(that.fmiIntegers))
        return false;
    }

    boolean this_present_fmiBooleans = true && this.isSetFmiBooleans();
    boolean that_present_fmiBooleans = true && that.isSetFmiBooleans();
    if (this_present_fmiBooleans || that_present_fmiBooleans) {
      if (!(this_present_fmiBooleans && that_present_fmiBooleans))
        return false;
      if (!this.fmiBooleans.equals(that.fmiBooleans))
        return false;
    }

    boolean this_present_fmiStrings = true && this.isSetFmiStrings();
    boolean that_present_fmiStrings = true && that.isSetFmiStrings();
    if (this_present_fmiStrings || that_present_fmiStrings) {
      if (!(this_present_fmiStrings && that_present_fmiStrings))
        return false;
      if (!this.fmiStrings.equals(that.fmiStrings))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_fmiReals = true && (isSetFmiReals());
    list.add(present_fmiReals);
    if (present_fmiReals)
      list.add(fmiReals);

    boolean present_fmiIntegers = true && (isSetFmiIntegers());
    list.add(present_fmiIntegers);
    if (present_fmiIntegers)
      list.add(fmiIntegers);

    boolean present_fmiBooleans = true && (isSetFmiBooleans());
    list.add(present_fmiBooleans);
    if (present_fmiBooleans)
      list.add(fmiBooleans);

    boolean present_fmiStrings = true && (isSetFmiStrings());
    list.add(present_fmiStrings);
    if (present_fmiStrings)
      list.add(fmiStrings);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFmiReals()).compareTo(other.isSetFmiReals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFmiReals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmiReals, other.fmiReals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFmiIntegers()).compareTo(other.isSetFmiIntegers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFmiIntegers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmiIntegers, other.fmiIntegers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFmiBooleans()).compareTo(other.isSetFmiBooleans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFmiBooleans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmiBooleans, other.fmiBooleans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFmiStrings()).compareTo(other.isSetFmiStrings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFmiStrings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmiStrings, other.fmiStrings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fmiReals:");
    if (this.fmiReals == null) {
      sb.append("null");
    } else {
      sb.append(this.fmiReals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fmiIntegers:");
    if (this.fmiIntegers == null) {
      sb.append("null");
    } else {
      sb.append(this.fmiIntegers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fmiBooleans:");
    if (this.fmiBooleans == null) {
      sb.append("null");
    } else {
      sb.append(this.fmiBooleans);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fmiStrings:");
    if (this.fmiStrings == null) {
      sb.append("null");
    } else {
      sb.append(this.fmiStrings);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepResponseStandardSchemeFactory implements SchemeFactory {
    public StepResponseStandardScheme getScheme() {
      return new StepResponseStandardScheme();
    }
  }

  private static class StepResponseStandardScheme extends StandardScheme<StepResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = org.eclipse.papyrus.moka.fmu.rcp.thrift.Status.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FMI_REALS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.fmiReals = new HashMap<Integer,Double>(2*_map40.size);
                int _key41;
                double _val42;
                for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                {
                  _key41 = iprot.readI32();
                  _val42 = iprot.readDouble();
                  struct.fmiReals.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setFmiRealsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FMI_INTEGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                struct.fmiIntegers = new HashMap<Integer,Integer>(2*_map44.size);
                int _key45;
                int _val46;
                for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                {
                  _key45 = iprot.readI32();
                  _val46 = iprot.readI32();
                  struct.fmiIntegers.put(_key45, _val46);
                }
                iprot.readMapEnd();
              }
              struct.setFmiIntegersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FMI_BOOLEANS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                struct.fmiBooleans = new HashMap<Integer,Boolean>(2*_map48.size);
                int _key49;
                boolean _val50;
                for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                {
                  _key49 = iprot.readI32();
                  _val50 = iprot.readBool();
                  struct.fmiBooleans.put(_key49, _val50);
                }
                iprot.readMapEnd();
              }
              struct.setFmiBooleansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FMI_STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
                struct.fmiStrings = new HashMap<Integer,String>(2*_map52.size);
                int _key53;
                String _val54;
                for (int _i55 = 0; _i55 < _map52.size; ++_i55)
                {
                  _key53 = iprot.readI32();
                  _val54 = iprot.readString();
                  struct.fmiStrings.put(_key53, _val54);
                }
                iprot.readMapEnd();
              }
              struct.setFmiStringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fmiReals != null) {
        oprot.writeFieldBegin(FMI_REALS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.fmiReals.size()));
          for (Map.Entry<Integer, Double> _iter56 : struct.fmiReals.entrySet())
          {
            oprot.writeI32(_iter56.getKey());
            oprot.writeDouble(_iter56.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fmiIntegers != null) {
        oprot.writeFieldBegin(FMI_INTEGERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.fmiIntegers.size()));
          for (Map.Entry<Integer, Integer> _iter57 : struct.fmiIntegers.entrySet())
          {
            oprot.writeI32(_iter57.getKey());
            oprot.writeI32(_iter57.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fmiBooleans != null) {
        oprot.writeFieldBegin(FMI_BOOLEANS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.BOOL, struct.fmiBooleans.size()));
          for (Map.Entry<Integer, Boolean> _iter58 : struct.fmiBooleans.entrySet())
          {
            oprot.writeI32(_iter58.getKey());
            oprot.writeBool(_iter58.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fmiStrings != null) {
        oprot.writeFieldBegin(FMI_STRINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.fmiStrings.size()));
          for (Map.Entry<Integer, String> _iter59 : struct.fmiStrings.entrySet())
          {
            oprot.writeI32(_iter59.getKey());
            oprot.writeString(_iter59.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StepResponseTupleSchemeFactory implements SchemeFactory {
    public StepResponseTupleScheme getScheme() {
      return new StepResponseTupleScheme();
    }
  }

  private static class StepResponseTupleScheme extends TupleScheme<StepResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StepResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetFmiReals()) {
        optionals.set(1);
      }
      if (struct.isSetFmiIntegers()) {
        optionals.set(2);
      }
      if (struct.isSetFmiBooleans()) {
        optionals.set(3);
      }
      if (struct.isSetFmiStrings()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetFmiReals()) {
        {
          oprot.writeI32(struct.fmiReals.size());
          for (Map.Entry<Integer, Double> _iter60 : struct.fmiReals.entrySet())
          {
            oprot.writeI32(_iter60.getKey());
            oprot.writeDouble(_iter60.getValue());
          }
        }
      }
      if (struct.isSetFmiIntegers()) {
        {
          oprot.writeI32(struct.fmiIntegers.size());
          for (Map.Entry<Integer, Integer> _iter61 : struct.fmiIntegers.entrySet())
          {
            oprot.writeI32(_iter61.getKey());
            oprot.writeI32(_iter61.getValue());
          }
        }
      }
      if (struct.isSetFmiBooleans()) {
        {
          oprot.writeI32(struct.fmiBooleans.size());
          for (Map.Entry<Integer, Boolean> _iter62 : struct.fmiBooleans.entrySet())
          {
            oprot.writeI32(_iter62.getKey());
            oprot.writeBool(_iter62.getValue());
          }
        }
      }
      if (struct.isSetFmiStrings()) {
        {
          oprot.writeI32(struct.fmiStrings.size());
          for (Map.Entry<Integer, String> _iter63 : struct.fmiStrings.entrySet())
          {
            oprot.writeI32(_iter63.getKey());
            oprot.writeString(_iter63.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StepResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.status = org.eclipse.papyrus.moka.fmu.rcp.thrift.Status.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.fmiReals = new HashMap<Integer,Double>(2*_map64.size);
          int _key65;
          double _val66;
          for (int _i67 = 0; _i67 < _map64.size; ++_i67)
          {
            _key65 = iprot.readI32();
            _val66 = iprot.readDouble();
            struct.fmiReals.put(_key65, _val66);
          }
        }
        struct.setFmiRealsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map68 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.fmiIntegers = new HashMap<Integer,Integer>(2*_map68.size);
          int _key69;
          int _val70;
          for (int _i71 = 0; _i71 < _map68.size; ++_i71)
          {
            _key69 = iprot.readI32();
            _val70 = iprot.readI32();
            struct.fmiIntegers.put(_key69, _val70);
          }
        }
        struct.setFmiIntegersIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map72 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.fmiBooleans = new HashMap<Integer,Boolean>(2*_map72.size);
          int _key73;
          boolean _val74;
          for (int _i75 = 0; _i75 < _map72.size; ++_i75)
          {
            _key73 = iprot.readI32();
            _val74 = iprot.readBool();
            struct.fmiBooleans.put(_key73, _val74);
          }
        }
        struct.setFmiBooleansIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fmiStrings = new HashMap<Integer,String>(2*_map76.size);
          int _key77;
          String _val78;
          for (int _i79 = 0; _i79 < _map76.size; ++_i79)
          {
            _key77 = iprot.readI32();
            _val78 = iprot.readString();
            struct.fmiStrings.put(_key77, _val78);
          }
        }
        struct.setFmiStringsIsSet(true);
      }
    }
  }

}

