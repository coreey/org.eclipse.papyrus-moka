/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.eclipse.papyrus.moka.fmu.rcp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-24")
public class StepRequest implements org.apache.thrift.TBase<StepRequest, StepRequest._Fields>, java.io.Serializable, Cloneable, Comparable<StepRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepRequest");

  private static final org.apache.thrift.protocol.TField CURRENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("currentTime", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField STEP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("stepSize", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField SET_REAL_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("setRealRequests", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField SET_INTEGER_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("setIntegerRequests", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField SET_BOOLEAN_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("setBooleanRequests", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField SET_STRING_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("setStringRequests", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StepRequestTupleSchemeFactory());
  }

  private double currentTime; // required
  private double stepSize; // required
  private Map<Integer,Double> setRealRequests; // required
  private Map<Integer,Integer> setIntegerRequests; // required
  private Map<Integer,Boolean> setBooleanRequests; // required
  private Map<Integer,String> setStringRequests; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENT_TIME((short)1, "currentTime"),
    STEP_SIZE((short)2, "stepSize"),
    SET_REAL_REQUESTS((short)3, "setRealRequests"),
    SET_INTEGER_REQUESTS((short)4, "setIntegerRequests"),
    SET_BOOLEAN_REQUESTS((short)5, "setBooleanRequests"),
    SET_STRING_REQUESTS((short)6, "setStringRequests");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_TIME
          return CURRENT_TIME;
        case 2: // STEP_SIZE
          return STEP_SIZE;
        case 3: // SET_REAL_REQUESTS
          return SET_REAL_REQUESTS;
        case 4: // SET_INTEGER_REQUESTS
          return SET_INTEGER_REQUESTS;
        case 5: // SET_BOOLEAN_REQUESTS
          return SET_BOOLEAN_REQUESTS;
        case 6: // SET_STRING_REQUESTS
          return SET_STRING_REQUESTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENTTIME_ISSET_ID = 0;
  private static final int __STEPSIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("currentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STEP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("stepSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SET_REAL_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("setRealRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.SET_INTEGER_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("setIntegerRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SET_BOOLEAN_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("setBooleanRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.SET_STRING_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("setStringRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepRequest.class, metaDataMap);
  }

  public StepRequest() {
  }

  public StepRequest(
    double currentTime,
    double stepSize,
    Map<Integer,Double> setRealRequests,
    Map<Integer,Integer> setIntegerRequests,
    Map<Integer,Boolean> setBooleanRequests,
    Map<Integer,String> setStringRequests)
  {
    this();
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
    this.stepSize = stepSize;
    setStepSizeIsSet(true);
    this.setRealRequests = setRealRequests;
    this.setIntegerRequests = setIntegerRequests;
    this.setBooleanRequests = setBooleanRequests;
    this.setStringRequests = setStringRequests;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepRequest(StepRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.currentTime = other.currentTime;
    this.stepSize = other.stepSize;
    if (other.isSetSetRealRequests()) {
      Map<Integer,Double> __this__setRealRequests = new HashMap<Integer,Double>(other.setRealRequests);
      this.setRealRequests = __this__setRealRequests;
    }
    if (other.isSetSetIntegerRequests()) {
      Map<Integer,Integer> __this__setIntegerRequests = new HashMap<Integer,Integer>(other.setIntegerRequests);
      this.setIntegerRequests = __this__setIntegerRequests;
    }
    if (other.isSetSetBooleanRequests()) {
      Map<Integer,Boolean> __this__setBooleanRequests = new HashMap<Integer,Boolean>(other.setBooleanRequests);
      this.setBooleanRequests = __this__setBooleanRequests;
    }
    if (other.isSetSetStringRequests()) {
      Map<Integer,String> __this__setStringRequests = new HashMap<Integer,String>(other.setStringRequests);
      this.setStringRequests = __this__setStringRequests;
    }
  }

  public StepRequest deepCopy() {
    return new StepRequest(this);
  }

  @Override
  public void clear() {
    setCurrentTimeIsSet(false);
    this.currentTime = 0.0;
    setStepSizeIsSet(false);
    this.stepSize = 0.0;
    this.setRealRequests = null;
    this.setIntegerRequests = null;
    this.setBooleanRequests = null;
    this.setStringRequests = null;
  }

  public double getCurrentTime() {
    return this.currentTime;
  }

  public void setCurrentTime(double currentTime) {
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
  }

  public void unsetCurrentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTTIME_ISSET_ID);
  }

  /** Returns true if field currentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTTIME_ISSET_ID);
  }

  public void setCurrentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTTIME_ISSET_ID, value);
  }

  public double getStepSize() {
    return this.stepSize;
  }

  public void setStepSize(double stepSize) {
    this.stepSize = stepSize;
    setStepSizeIsSet(true);
  }

  public void unsetStepSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STEPSIZE_ISSET_ID);
  }

  /** Returns true if field stepSize is set (has been assigned a value) and false otherwise */
  public boolean isSetStepSize() {
    return EncodingUtils.testBit(__isset_bitfield, __STEPSIZE_ISSET_ID);
  }

  public void setStepSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STEPSIZE_ISSET_ID, value);
  }

  public int getSetRealRequestsSize() {
    return (this.setRealRequests == null) ? 0 : this.setRealRequests.size();
  }

  public void putToSetRealRequests(int key, double val) {
    if (this.setRealRequests == null) {
      this.setRealRequests = new HashMap<Integer,Double>();
    }
    this.setRealRequests.put(key, val);
  }

  public Map<Integer,Double> getSetRealRequests() {
    return this.setRealRequests;
  }

  public void setSetRealRequests(Map<Integer,Double> setRealRequests) {
    this.setRealRequests = setRealRequests;
  }

  public void unsetSetRealRequests() {
    this.setRealRequests = null;
  }

  /** Returns true if field setRealRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetSetRealRequests() {
    return this.setRealRequests != null;
  }

  public void setSetRealRequestsIsSet(boolean value) {
    if (!value) {
      this.setRealRequests = null;
    }
  }

  public int getSetIntegerRequestsSize() {
    return (this.setIntegerRequests == null) ? 0 : this.setIntegerRequests.size();
  }

  public void putToSetIntegerRequests(int key, int val) {
    if (this.setIntegerRequests == null) {
      this.setIntegerRequests = new HashMap<Integer,Integer>();
    }
    this.setIntegerRequests.put(key, val);
  }

  public Map<Integer,Integer> getSetIntegerRequests() {
    return this.setIntegerRequests;
  }

  public void setSetIntegerRequests(Map<Integer,Integer> setIntegerRequests) {
    this.setIntegerRequests = setIntegerRequests;
  }

  public void unsetSetIntegerRequests() {
    this.setIntegerRequests = null;
  }

  /** Returns true if field setIntegerRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetSetIntegerRequests() {
    return this.setIntegerRequests != null;
  }

  public void setSetIntegerRequestsIsSet(boolean value) {
    if (!value) {
      this.setIntegerRequests = null;
    }
  }

  public int getSetBooleanRequestsSize() {
    return (this.setBooleanRequests == null) ? 0 : this.setBooleanRequests.size();
  }

  public void putToSetBooleanRequests(int key, boolean val) {
    if (this.setBooleanRequests == null) {
      this.setBooleanRequests = new HashMap<Integer,Boolean>();
    }
    this.setBooleanRequests.put(key, val);
  }

  public Map<Integer,Boolean> getSetBooleanRequests() {
    return this.setBooleanRequests;
  }

  public void setSetBooleanRequests(Map<Integer,Boolean> setBooleanRequests) {
    this.setBooleanRequests = setBooleanRequests;
  }

  public void unsetSetBooleanRequests() {
    this.setBooleanRequests = null;
  }

  /** Returns true if field setBooleanRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetSetBooleanRequests() {
    return this.setBooleanRequests != null;
  }

  public void setSetBooleanRequestsIsSet(boolean value) {
    if (!value) {
      this.setBooleanRequests = null;
    }
  }

  public int getSetStringRequestsSize() {
    return (this.setStringRequests == null) ? 0 : this.setStringRequests.size();
  }

  public void putToSetStringRequests(int key, String val) {
    if (this.setStringRequests == null) {
      this.setStringRequests = new HashMap<Integer,String>();
    }
    this.setStringRequests.put(key, val);
  }

  public Map<Integer,String> getSetStringRequests() {
    return this.setStringRequests;
  }

  public void setSetStringRequests(Map<Integer,String> setStringRequests) {
    this.setStringRequests = setStringRequests;
  }

  public void unsetSetStringRequests() {
    this.setStringRequests = null;
  }

  /** Returns true if field setStringRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetSetStringRequests() {
    return this.setStringRequests != null;
  }

  public void setSetStringRequestsIsSet(boolean value) {
    if (!value) {
      this.setStringRequests = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENT_TIME:
      if (value == null) {
        unsetCurrentTime();
      } else {
        setCurrentTime((Double)value);
      }
      break;

    case STEP_SIZE:
      if (value == null) {
        unsetStepSize();
      } else {
        setStepSize((Double)value);
      }
      break;

    case SET_REAL_REQUESTS:
      if (value == null) {
        unsetSetRealRequests();
      } else {
        setSetRealRequests((Map<Integer,Double>)value);
      }
      break;

    case SET_INTEGER_REQUESTS:
      if (value == null) {
        unsetSetIntegerRequests();
      } else {
        setSetIntegerRequests((Map<Integer,Integer>)value);
      }
      break;

    case SET_BOOLEAN_REQUESTS:
      if (value == null) {
        unsetSetBooleanRequests();
      } else {
        setSetBooleanRequests((Map<Integer,Boolean>)value);
      }
      break;

    case SET_STRING_REQUESTS:
      if (value == null) {
        unsetSetStringRequests();
      } else {
        setSetStringRequests((Map<Integer,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_TIME:
      return getCurrentTime();

    case STEP_SIZE:
      return getStepSize();

    case SET_REAL_REQUESTS:
      return getSetRealRequests();

    case SET_INTEGER_REQUESTS:
      return getSetIntegerRequests();

    case SET_BOOLEAN_REQUESTS:
      return getSetBooleanRequests();

    case SET_STRING_REQUESTS:
      return getSetStringRequests();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_TIME:
      return isSetCurrentTime();
    case STEP_SIZE:
      return isSetStepSize();
    case SET_REAL_REQUESTS:
      return isSetSetRealRequests();
    case SET_INTEGER_REQUESTS:
      return isSetSetIntegerRequests();
    case SET_BOOLEAN_REQUESTS:
      return isSetSetBooleanRequests();
    case SET_STRING_REQUESTS:
      return isSetSetStringRequests();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepRequest)
      return this.equals((StepRequest)that);
    return false;
  }

  public boolean equals(StepRequest that) {
    if (that == null)
      return false;

    boolean this_present_currentTime = true;
    boolean that_present_currentTime = true;
    if (this_present_currentTime || that_present_currentTime) {
      if (!(this_present_currentTime && that_present_currentTime))
        return false;
      if (this.currentTime != that.currentTime)
        return false;
    }

    boolean this_present_stepSize = true;
    boolean that_present_stepSize = true;
    if (this_present_stepSize || that_present_stepSize) {
      if (!(this_present_stepSize && that_present_stepSize))
        return false;
      if (this.stepSize != that.stepSize)
        return false;
    }

    boolean this_present_setRealRequests = true && this.isSetSetRealRequests();
    boolean that_present_setRealRequests = true && that.isSetSetRealRequests();
    if (this_present_setRealRequests || that_present_setRealRequests) {
      if (!(this_present_setRealRequests && that_present_setRealRequests))
        return false;
      if (!this.setRealRequests.equals(that.setRealRequests))
        return false;
    }

    boolean this_present_setIntegerRequests = true && this.isSetSetIntegerRequests();
    boolean that_present_setIntegerRequests = true && that.isSetSetIntegerRequests();
    if (this_present_setIntegerRequests || that_present_setIntegerRequests) {
      if (!(this_present_setIntegerRequests && that_present_setIntegerRequests))
        return false;
      if (!this.setIntegerRequests.equals(that.setIntegerRequests))
        return false;
    }

    boolean this_present_setBooleanRequests = true && this.isSetSetBooleanRequests();
    boolean that_present_setBooleanRequests = true && that.isSetSetBooleanRequests();
    if (this_present_setBooleanRequests || that_present_setBooleanRequests) {
      if (!(this_present_setBooleanRequests && that_present_setBooleanRequests))
        return false;
      if (!this.setBooleanRequests.equals(that.setBooleanRequests))
        return false;
    }

    boolean this_present_setStringRequests = true && this.isSetSetStringRequests();
    boolean that_present_setStringRequests = true && that.isSetSetStringRequests();
    if (this_present_setStringRequests || that_present_setStringRequests) {
      if (!(this_present_setStringRequests && that_present_setStringRequests))
        return false;
      if (!this.setStringRequests.equals(that.setStringRequests))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_currentTime = true;
    list.add(present_currentTime);
    if (present_currentTime)
      list.add(currentTime);

    boolean present_stepSize = true;
    list.add(present_stepSize);
    if (present_stepSize)
      list.add(stepSize);

    boolean present_setRealRequests = true && (isSetSetRealRequests());
    list.add(present_setRealRequests);
    if (present_setRealRequests)
      list.add(setRealRequests);

    boolean present_setIntegerRequests = true && (isSetSetIntegerRequests());
    list.add(present_setIntegerRequests);
    if (present_setIntegerRequests)
      list.add(setIntegerRequests);

    boolean present_setBooleanRequests = true && (isSetSetBooleanRequests());
    list.add(present_setBooleanRequests);
    if (present_setBooleanRequests)
      list.add(setBooleanRequests);

    boolean present_setStringRequests = true && (isSetSetStringRequests());
    list.add(present_setStringRequests);
    if (present_setStringRequests)
      list.add(setStringRequests);

    return list.hashCode();
  }

  @Override
  public int compareTo(StepRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrentTime()).compareTo(other.isSetCurrentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentTime, other.currentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepSize()).compareTo(other.isSetStepSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepSize, other.stepSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetRealRequests()).compareTo(other.isSetSetRealRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetRealRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setRealRequests, other.setRealRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetIntegerRequests()).compareTo(other.isSetSetIntegerRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetIntegerRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setIntegerRequests, other.setIntegerRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetBooleanRequests()).compareTo(other.isSetSetBooleanRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetBooleanRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setBooleanRequests, other.setBooleanRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetStringRequests()).compareTo(other.isSetSetStringRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetStringRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setStringRequests, other.setStringRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepRequest(");
    boolean first = true;

    sb.append("currentTime:");
    sb.append(this.currentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stepSize:");
    sb.append(this.stepSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("setRealRequests:");
    if (this.setRealRequests == null) {
      sb.append("null");
    } else {
      sb.append(this.setRealRequests);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setIntegerRequests:");
    if (this.setIntegerRequests == null) {
      sb.append("null");
    } else {
      sb.append(this.setIntegerRequests);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setBooleanRequests:");
    if (this.setBooleanRequests == null) {
      sb.append("null");
    } else {
      sb.append(this.setBooleanRequests);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setStringRequests:");
    if (this.setStringRequests == null) {
      sb.append("null");
    } else {
      sb.append(this.setStringRequests);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepRequestStandardSchemeFactory implements SchemeFactory {
    public StepRequestStandardScheme getScheme() {
      return new StepRequestStandardScheme();
    }
  }

  private static class StepRequestStandardScheme extends StandardScheme<StepRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currentTime = iprot.readDouble();
              struct.setCurrentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STEP_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stepSize = iprot.readDouble();
              struct.setStepSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SET_REAL_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.setRealRequests = new HashMap<Integer,Double>(2*_map0.size);
                int _key1;
                double _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readDouble();
                  struct.setRealRequests.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setSetRealRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SET_INTEGER_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.setIntegerRequests = new HashMap<Integer,Integer>(2*_map4.size);
                int _key5;
                int _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readI32();
                  _val6 = iprot.readI32();
                  struct.setIntegerRequests.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setSetIntegerRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SET_BOOLEAN_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.setBooleanRequests = new HashMap<Integer,Boolean>(2*_map8.size);
                int _key9;
                boolean _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readI32();
                  _val10 = iprot.readBool();
                  struct.setBooleanRequests.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setSetBooleanRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SET_STRING_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.setStringRequests = new HashMap<Integer,String>(2*_map12.size);
                int _key13;
                String _val14;
                for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                {
                  _key13 = iprot.readI32();
                  _val14 = iprot.readString();
                  struct.setStringRequests.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setSetStringRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CURRENT_TIME_FIELD_DESC);
      oprot.writeDouble(struct.currentTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STEP_SIZE_FIELD_DESC);
      oprot.writeDouble(struct.stepSize);
      oprot.writeFieldEnd();
      if (struct.setRealRequests != null) {
        oprot.writeFieldBegin(SET_REAL_REQUESTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.setRealRequests.size()));
          for (Map.Entry<Integer, Double> _iter16 : struct.setRealRequests.entrySet())
          {
            oprot.writeI32(_iter16.getKey());
            oprot.writeDouble(_iter16.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setIntegerRequests != null) {
        oprot.writeFieldBegin(SET_INTEGER_REQUESTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.setIntegerRequests.size()));
          for (Map.Entry<Integer, Integer> _iter17 : struct.setIntegerRequests.entrySet())
          {
            oprot.writeI32(_iter17.getKey());
            oprot.writeI32(_iter17.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setBooleanRequests != null) {
        oprot.writeFieldBegin(SET_BOOLEAN_REQUESTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.BOOL, struct.setBooleanRequests.size()));
          for (Map.Entry<Integer, Boolean> _iter18 : struct.setBooleanRequests.entrySet())
          {
            oprot.writeI32(_iter18.getKey());
            oprot.writeBool(_iter18.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setStringRequests != null) {
        oprot.writeFieldBegin(SET_STRING_REQUESTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.setStringRequests.size()));
          for (Map.Entry<Integer, String> _iter19 : struct.setStringRequests.entrySet())
          {
            oprot.writeI32(_iter19.getKey());
            oprot.writeString(_iter19.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StepRequestTupleSchemeFactory implements SchemeFactory {
    public StepRequestTupleScheme getScheme() {
      return new StepRequestTupleScheme();
    }
  }

  private static class StepRequestTupleScheme extends TupleScheme<StepRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StepRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrentTime()) {
        optionals.set(0);
      }
      if (struct.isSetStepSize()) {
        optionals.set(1);
      }
      if (struct.isSetSetRealRequests()) {
        optionals.set(2);
      }
      if (struct.isSetSetIntegerRequests()) {
        optionals.set(3);
      }
      if (struct.isSetSetBooleanRequests()) {
        optionals.set(4);
      }
      if (struct.isSetSetStringRequests()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCurrentTime()) {
        oprot.writeDouble(struct.currentTime);
      }
      if (struct.isSetStepSize()) {
        oprot.writeDouble(struct.stepSize);
      }
      if (struct.isSetSetRealRequests()) {
        {
          oprot.writeI32(struct.setRealRequests.size());
          for (Map.Entry<Integer, Double> _iter20 : struct.setRealRequests.entrySet())
          {
            oprot.writeI32(_iter20.getKey());
            oprot.writeDouble(_iter20.getValue());
          }
        }
      }
      if (struct.isSetSetIntegerRequests()) {
        {
          oprot.writeI32(struct.setIntegerRequests.size());
          for (Map.Entry<Integer, Integer> _iter21 : struct.setIntegerRequests.entrySet())
          {
            oprot.writeI32(_iter21.getKey());
            oprot.writeI32(_iter21.getValue());
          }
        }
      }
      if (struct.isSetSetBooleanRequests()) {
        {
          oprot.writeI32(struct.setBooleanRequests.size());
          for (Map.Entry<Integer, Boolean> _iter22 : struct.setBooleanRequests.entrySet())
          {
            oprot.writeI32(_iter22.getKey());
            oprot.writeBool(_iter22.getValue());
          }
        }
      }
      if (struct.isSetSetStringRequests()) {
        {
          oprot.writeI32(struct.setStringRequests.size());
          for (Map.Entry<Integer, String> _iter23 : struct.setStringRequests.entrySet())
          {
            oprot.writeI32(_iter23.getKey());
            oprot.writeString(_iter23.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StepRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.currentTime = iprot.readDouble();
        struct.setCurrentTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stepSize = iprot.readDouble();
        struct.setStepSizeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.setRealRequests = new HashMap<Integer,Double>(2*_map24.size);
          int _key25;
          double _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readI32();
            _val26 = iprot.readDouble();
            struct.setRealRequests.put(_key25, _val26);
          }
        }
        struct.setSetRealRequestsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map28 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.setIntegerRequests = new HashMap<Integer,Integer>(2*_map28.size);
          int _key29;
          int _val30;
          for (int _i31 = 0; _i31 < _map28.size; ++_i31)
          {
            _key29 = iprot.readI32();
            _val30 = iprot.readI32();
            struct.setIntegerRequests.put(_key29, _val30);
          }
        }
        struct.setSetIntegerRequestsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.setBooleanRequests = new HashMap<Integer,Boolean>(2*_map32.size);
          int _key33;
          boolean _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = iprot.readI32();
            _val34 = iprot.readBool();
            struct.setBooleanRequests.put(_key33, _val34);
          }
        }
        struct.setSetBooleanRequestsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.setStringRequests = new HashMap<Integer,String>(2*_map36.size);
          int _key37;
          String _val38;
          for (int _i39 = 0; _i39 < _map36.size; ++_i39)
          {
            _key37 = iprot.readI32();
            _val38 = iprot.readString();
            struct.setStringRequests.put(_key37, _val38);
          }
        }
        struct.setSetStringRequestsIsSet(true);
      }
    }
  }

}

