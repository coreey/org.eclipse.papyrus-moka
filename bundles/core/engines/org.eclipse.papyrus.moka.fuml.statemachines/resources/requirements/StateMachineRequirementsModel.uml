<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Requirements="http://www.eclipse.org/papyrus/0.7.0/SysML/Requirements" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http://www.eclipse.org/papyrus/0.7.0/SysML/Requirements http://www.eclipse.org/papyrus/0.7.0/SysML#//requirements">
  <uml:Model xmi:id="_CTqVQHS-EeSWm4eA3mEYSg" name="SysMLmodel">
    <packagedElement xmi:type="uml:Class" xmi:id="_9iNtkHS_EeSWm4eA3mEYSg" name="Event pool ownership"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_giFCYHTDEeSWm4eA3mEYSg" name="Region activation"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_zgRxwHTDEeSWm4eA3mEYSg" name="Region default activation"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_Xkow0HTEEeSWm4eA3mEYSg" name="Region explicit activation"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_zDjkEHTEEeSWm4eA3mEYSg" name="State configuration representation"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_j-JOsHTFEeSWm4eA3mEYSg" name="Active state configuration uniqueness"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_xkDqwHTFEeSWm4eA3mEYSg" name="Active state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_kVqhYHTGEeSWm4eA3mEYSg" name="State configuration stability"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_BoxPEHTHEeSWm4eA3mEYSg" name="StateMachine state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_AG74YHVVEeSWm4eA3mEYSg" name="Entry behavior execution"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_XiQTUHVVEeSWm4eA3mEYSg" name="Exit behavior execution"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_ppGj8HVVEeSWm4eA3mEYSg" name="DoActivity behavior execution"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_3DpdgHVVEeSWm4eA3mEYSg" name="Insensitivity of DoActivity executions to internal transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_kS6eMHVcEeSWm4eA3mEYSg" name="Deep history recovering"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_zpCToHVcEeSWm4eA3mEYSg" name="Shallow history recovering"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_54dqUHVcEeSWm4eA3mEYSg" name="Default history mechanism"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_NS97MHVdEeSWm4eA3mEYSg" name="Absence of default history transition"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_Mt9oUHVrEeSWm4eA3mEYSg" name="Deferred events"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_bDqikHVrEeSWm4eA3mEYSg" name="Deferred events of composite and submachine states"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_36RhgHVrEeSWm4eA3mEYSg" name="Entering simple states (Entry)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_R8EPcHVsEeSWm4eA3mEYSg" name="Entering simple states (DoActivity)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_e-SvoHVsEeSWm4eA3mEYSg" name="Composite state default entry with initial pseudostate"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_vhmUcHVtEeSWm4eA3mEYSg" name="Composite state default entry with NO initial pseudostate"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_DAbEoHVuEeSWm4eA3mEYSg" name="Composite state explicit entry"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_TqBUIHVuEeSWm4eA3mEYSg" name="Composite state shallow history entry"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_wEwPYHVuEeSWm4eA3mEYSg" name="Composite state shallow history entry (exceptions to Entering_006)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_XM1eIHVvEeSWm4eA3mEYSg" name="Composite state deep history entry"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_4rhbcHVvEeSWm4eA3mEYSg" name="Composite state entry point entry"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_Hme-4HVwEeSWm4eA3mEYSg" name="Orthogonal composite state entry"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_TUNxUHVwEeSWm4eA3mEYSg" name="Default entry in orthogonal composite state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_au5aMHVwEeSWm4eA3mEYSg" name="Explicit entry in orthogonal composite state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_HU5qMHVxEeSWm4eA3mEYSg" name="StateMachine state (2)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_8tIrMHV5EeSWm4eA3mEYSg" name="Exiting a state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_UQ9h4HV6EeSWm4eA3mEYSg" name="Abortion of the DoActivity before start of the exit behavior"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_1nTbgHV6EeSWm4eA3mEYSg" name="Exiting a composite state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_7N1mMHV6EeSWm4eA3mEYSg" name="Exiting a composite state through an exit point"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_VnKqYHV7EeSWm4eA3mEYSg" name="Exiting an orthogonal state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_cxotAHV7EeSWm4eA3mEYSg" name="StateMachine state (3)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_jBeogHV9EeSWm4eA3mEYSg" name="Composite state entry point entry (2)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_DavO0HV-EeSWm4eA3mEYSg" name="Absence of outgoing transition from an entry point inside a composite state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_UgE_IHV-EeSWm4eA3mEYSg" name="Exiting a composite state through an exit point (2)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_kBXGQHV_EeSWm4eA3mEYSg" name="SubmachineState entry through entry points"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_QivYIHWEEeSWm4eA3mEYSg" name="Guards of transitions on entry points"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_t4X1YHWEEeSWm4eA3mEYSg" name="Exiting a submachine state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_jTS3oHWFEeSWm4eA3mEYSg" name="Entry through connection point reference"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_zQPcgHWFEeSWm4eA3mEYSg" name="Exit through connection point reference"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_SVrqgHWGEeSWm4eA3mEYSg" name="Reaching a final state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_0XMBAHWGEeSWm4eA3mEYSg" name="Deep history recovering (2)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_HLfNgHWHEeSWm4eA3mEYSg" name="Shallow history recovering (2)"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_dW78AHWHEeSWm4eA3mEYSg" name="Continuing through a join pseudostate"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_a8onUHWIEeSWm4eA3mEYSg" name="Guards on outgoing transitions of a junction pseudo state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_z7XVwHWIEeSWm4eA3mEYSg" name="Disabling a compound transition"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_8brxAHWIEeSWm4eA3mEYSg" name="Multiple guards on outgoing transitions of a junction pseudo state evaluating to true"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_ylUTYHWJEeSWm4eA3mEYSg" name="Guards on outgoing transitions of a choice pseudo state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_HHf-AHWKEeSWm4eA3mEYSg" name="Multiple guards on outgoing transitions of a choice pseudo state evaluating to true"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_REB4kHWKEeSWm4eA3mEYSg" name="None of the guards on outgoing transitions of a choice pseudo state evaluating to true"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_gaO_kHYkEeSWm4eA3mEYSg" name="Execution of the entry behavior of a state owning an entry point"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_9UK_UHYkEeSWm4eA3mEYSg" name="Entry point involving multiple regions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_dtWGEHYlEeSWm4eA3mEYSg" name="Transitions terminating on an exit point"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_2O1e4HYlEeSWm4eA3mEYSg" name="Multiple transitions terminanting on an exit point"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_AyzM4HYmEeSWm4eA3mEYSg" name="Termination of state machine"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_JZ0tEHYmEeSWm4eA3mEYSg" name="Abortion of doActivity executions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_lE6eoHYnEeSWm4eA3mEYSg" name="Effect behavior execution"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_xSOwEHYnEeSWm4eA3mEYSg" name="Duration of a transition traversal"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_L61mYHYoEeSWm4eA3mEYSg" name="Transition execution within compound transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_VLWIcHYoEeSWm4eA3mEYSg" name="Reached transition"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_VrLfEHYoEeSWm4eA3mEYSg" name="Traversed transition"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_WQfLkHYoEeSWm4eA3mEYSg" name="Completed transition"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_9_0nkHYoEeSWm4eA3mEYSg" name="Triggering of transition traversal by events"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_WbFmIHY1EeSWm4eA3mEYSg" name="Enables transition triggers"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_diqFwHY1EeSWm4eA3mEYSg" name="Logically disjunctive triggers"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_xWy-oHY1EeSWm4eA3mEYSg" name="External transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_x0iDgHY1EeSWm4eA3mEYSg" name="Local transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_ybhyEHY1EeSWm4eA3mEYSg" name="Internal transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_Y7CdkHY5EeSWm4eA3mEYSg" name="External group transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_eNvGQHY5EeSWm4eA3mEYSg" name="Internal group transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pl-J0HY5EeSWm4eA3mEYSg" name="Simple state completion event"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_7dzHAHY5EeSWm4eA3mEYSg" name="Simple state completion event upon entry"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_HxSR4HY6EeSWm4eA3mEYSg" name="Composite state completion event"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_ipFawHY6EeSWm4eA3mEYSg" name="Submachine state completion event"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_yBIi0HY6EeSWm4eA3mEYSg" name="Dispatching priority of completion events"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_6ZiYMHY6EeSWm4eA3mEYSg" name="Processing order of completion events"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_P9nksHY7EeSWm4eA3mEYSg" name="Completion of all top level regions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_d6NbYHY7EeSWm4eA3mEYSg" name="Disabled (by guard) transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_nAH3AHY7EeSWm4eA3mEYSg" name="Guard evaluation in compound transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_szlqcHY7EeSWm4eA3mEYSg" name="Guards on transitions that originate from a choice pseudo state"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_1wIusHY7EeSWm4eA3mEYSg" name="Default guard"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_P0j9EHZAEeSWm4eA3mEYSg" name="Branching in a compound transition"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_U2VYYHZBEeSWm4eA3mEYSg" name="Transition selection on choice or join pseudo states"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_M9SRIHZEEeSWm4eA3mEYSg" name="StateMachine initialization"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_dBdfYHZEEeSWm4eA3mEYSg" name="StateMachine event processing"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_TPpxoHZFEeSWm4eA3mEYSg" name="StateMachine execution step"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_yo5scHZFEeSWm4eA3mEYSg" name="StateMachine termination"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_4lzIsHZFEeSWm4eA3mEYSg" name="Events supported by StateMachines"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_DXvBQHZGEeSWm4eA3mEYSg" name="Dispatching one event at a time"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_T8el8HZGEeSWm4eA3mEYSg" name="Run-to-completion step"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_ZbVJYHZIEeSWm4eA3mEYSg" name="Discarded event"/>
    <packagedElement xmi:type="uml:Class" xmi:id="__hfBEHZIEeSWm4eA3mEYSg" name="Execution order of multiple transitions triggered by the same event"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_PLNvAHZJEeSWm4eA3mEYSg" name="Transition firing in orthogonal regions for a same event"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_cgXyQHZJEeSWm4eA3mEYSg" name="Run-to-completion in orthogonal regions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_qxcrMHZJEeSWm4eA3mEYSg" name="Transition selection algorithm"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_1NL_YHZLEeSWm4eA3mEYSg" name="Blocking call inside a RTC step"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_Q-C3MHZMEeSWm4eA3mEYSg" name="Enabled transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_CAWTYHZNEeSWm4eA3mEYSg" name="Conflicting transitions"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_gm8pQHZNEeSWm4eA3mEYSg" name="Priority of a transition"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_iXtcQHZNEeSWm4eA3mEYSg" name="Priority of transitions chained in a compound transition"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_MtFtcHZOEeSWm4eA3mEYSg" name="Transition execution sequence"/>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaUW4HS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaU98HS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_TZ_nULU5EduiKqCzJMWbGw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaWMEHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaWMEXS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//modelelements"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_Gx8MgLX7EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaWzIHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaWzIXS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//blocks"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_fSw28LX7EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaWzInS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaWzI3S-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//portandflows"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_rpx28LX7EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaXaMHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaXaMXS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//constraints"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_5WYJ0LX7EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaYBQHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaYBQXS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//activities"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_C2zXMLX8EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaYoUHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaYoUXS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//allocations"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_NxdG4LX8EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaZPYHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaZPYXS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//requirements"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_OOJC4LX8EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaZ2cHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaZ2cXS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//interactions"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_meOioLX8EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CaadgHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CaadgXS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//statemachines"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_nAF5kLX8EduFmqQsrNB9lw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_CabEkHS-EeSWm4eA3mEYSg">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_CabroHS-EeSWm4eA3mEYSg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/0.7.0/SysML#//usecases"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://SysML_PROFILES/SysML.profile.uml#_neZmMLX8EduFmqQsrNB9lw"/>
    </profileApplication>
  </uml:Model>
  <Requirements:Requirement xmi:id="_9iSmEHS_EeSWm4eA3mEYSg" text="The event pool for a StateMachine execution belongs to either its context Classifier object or, if the StateMachine defines a method of a BehavioralFeature, to the instance of the Classifier owning the BehavioralFeature (p. 321)" id="Event_001" base_Class="_9iNtkHS_EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_giGQgHTDEeSWm4eA3mEYSg" text="A Region becomes active (i.e., it begins executing) either when its owning State is entered or, if it is directly owned by a StateMachine (i.e., it is a top level Region), when its owning StateMachine starts executing. (p. 321)" id="Region_001" base_Class="_giFCYHTDEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_zgTm8HTDEeSWm4eA3mEYSg" text="A default activation of a Region occurs if the Region is entered implicitly, that is, it is not entered through an incoming Transition that terminates on one of its component Vertices (e.g., a State or a history Pseudostate), but either through a (local or external) Transition that terminates on the containing State or, in case of a top level Region, when the StateMachine starts executing. Default activation means that execution starts with the Transition originating from the initial Pseudostate of the Region, if one is defined. no specific approach is defined if there is no initial Pseudostate exists within the Region. One possible approach is to deem the model ill defined. An alternative is that the Region remains inactive, although the State that contains it is active. In other words, the containing composite State is treated as a simple (leaf) State. (p.321)" id="Region_002" base_Class="_zgRxwHTDEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_Xkp-8HTEEeSWm4eA3mEYSg" text="an explicit activation occurs when a Region is entered by a Transition terminating on one of the Region’s contained Vertices. When one Region of an orthogonal State is activated explicitly, this will result in the default activation of all of its orthogonal Regions, unless those Regions are also entered explicitly (multiple orthogonal Regions can be entered explicitly in parallel through Transitions originating from the same fork Pseudostate). (p.321)" id="Region_003" base_Class="_Xkow0HTEEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_zDkyMHTEEeSWm4eA3mEYSg" text="a particular “state” of an executing StateMachine instance is represented by one or more hierarchies of States, starting with the topmost Regions of the StateMachine and down through the composition hierarchy to the simple, or leaf, States. Similarly, we can talk about such a hierarchy of substates within a composite State. This complex hierarchy of States is referred to as a state configuration (of a State or a StateMachine) (p.322)" id="State_Config_001" base_Class="_zDjkEHTEEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_j-Kc0HTFEeSWm4eA3mEYSg" text="An executing StateMachine instance can only be in exactly one state configuration at a time, which is referred to as its active state configuration." id="State_Config_002" base_Class="_j-JOsHTFEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_xkER0HTFEeSWm4eA3mEYSg" text="A State is said to be active if it is part of the active state configuration." id="State_Config_003" base_Class="_xkDqwHTFEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_kVrvgHTGEeSWm4eA3mEYSg" text="A state configuration is said to be stable when no further Transitions from that state configuration are enabled and all the entry Behaviors of that configuration, if present, have completed (but not necessarily the doActivity Behaviors of that configuration, which, if defined, may continue executing). (p.322) A configuration is deemed stable even if there are deferred, completion, or any other types of Event occurrences pending in the event pool of that StateMachine (p.324)" id="State_Config_004" base_Class="_kVqhYHTGEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_BozEQHTHEeSWm4eA3mEYSg" text="After it has been created and completed its initial Transition, a StateMachine is always “in” some state configuration. However, because States can be hierarchical and because there can be Behaviors associated with both Transitions and States, “entering” a hierarchical state configuration involves a dynamic process that terminates only after a stable state configuration (as defined above) is reached. (p.322)" id="State_Config_005" base_Class="_BoxPEHTHEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_AG9tkHVVEeSWm4eA3mEYSg" text="A State may have an associated entry Behavior. This Behavior, if defined, is executed whenever the State is entered through an external Transition. (p.323)" id="Behaviors_001" base_Class="_AG74YHVVEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_XiSIgHVVEeSWm4eA3mEYSg" text="A State may also have an associated exit Behavior, which, if defined, is executed whenever the State is exited. (p.323)" id="Behaviors_002" base_Class="_XiQTUHVVEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_ppHyEHVVEeSWm4eA3mEYSg" text="A State may also have an associated doActivity Behavior. This Behavior commences execution when the State is entered (but only after the State entry Behavior has completed) and executes concurrently with any other Behaviors that may be associated with the State, until it completes (in which case a completion event is generated) or the State is exited, in which case execution of the doActivity Behavior is aborted. (p.323)" id="Behaviors_003" base_Class="_ppGj8HVVEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_3DqroHVVEeSWm4eA3mEYSg" text="The execution of a doActivity Behavior of a State is not affected by the firing of an internal Transition of that State." id="Behaviors_004" base_Class="_3DpdgHVVEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_kS8TYHVcEeSWm4eA3mEYSg" text="Deep history (deepHistory) represents the full state configuration of the most recent visit to the containing Region. The effect is the same as if the Transition terminating on the deepHistory Pseudostate had, instead, terminated on the innermost State of the preserved state configuration, including execution of all entry Behaviors encountered along the way. (p.323)" id="History_001" base_Class="_kS6eMHVcEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_zpDhwHVcEeSWm4eA3mEYSg" text="Deep history (deepHistory) represents the full state configuration of the most recent visit to the containing Region. The effect is the same as if the Transition terminating on the deepHistory Pseudostate had, instead, terminated on the innermost State of the preserved state configuration, including execution of all entry Behaviors encountered along the way. (p.323)" id="History_002" base_Class="_zpCToHVcEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_54e4cHVcEeSWm4eA3mEYSg" text="In cases where a Transition terminates on a history Pseudostate when the State has not been entered before (i.e., no prior history) or it had reached its FinalState, there is an option to force a transition to a specific substate, using the default history mechanism. This is a Transition that originates in the history Pseudostate and terminates on a specific Vertex (the default history state) of the Region containing the history Pseudostate. This Transition is only taken if execution leads to the history Pseudostate and the State had never been active before. Otherwise, the appropriate history entry into the Region is executed (see above). (p.323)" id="History_003" base_Class="_54dqUHVcEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_NS_JUHVdEeSWm4eA3mEYSg" text="If no default history Transition is defined, then standard default entry of the Region is performed (p.323) cf. requirement XXX" id="History_004" base_Class="_NS97MHVdEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_Mt_dgHVrEeSWm4eA3mEYSg" text="A State may specify a set of Event types that may be deferred in that State. This means that Event occurrences of those types will not be dispatched as long as that State remains active. Instead, these Event occurrences remain in the event pool until a state configuration is reached where these Event types are no longer deferred or, if a deferred Event type is used explicitly in a Trigger of a Transition whose source is the deferring State (i.e., a kind of override option). (p.323)" id="Deferred_001" base_Class="_Mt9oUHVrEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_bDrwsHVrEeSWm4eA3mEYSg" text="An Event may be deferred by a composite State or submachine States, in which case it remains deferred as long as the composite State remains in the active configuration. (p.323)" id="Deferred_002" base_Class="_bDqikHVrEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_36SvoHVrEeSWm4eA3mEYSg" text="The rule for this case is the same as for shallow history except that the target Pseudostate is of type deepHistory and the rule is applied recursively to all levels in the active state configuration below this one. (p.324)" id="Entering_001" base_Class="_36RhgHVrEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_R8FdkHVsEeSWm4eA3mEYSg" text="if a doActivity Behavior is defined for the State, this Behavior commences execution immediately after the entry Behavior is executed. It executes concurrently with any subsequent Behaviors associated with entering the State, such as the entry Behaviors of substates entered as part of the same compound transition. (p.324)" id="Entering_002" base_Class="_R8EPcHVsEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_e-T9wHVsEeSWm4eA3mEYSg" text="If the incoming Transition terminates on a shallowHistory Pseudostate of a Region of the composite State, the active substate becomes the substate that was most recently active prior to this entry (p. 324) cf. exceptions described in req Entering_007" id="Entering_003" base_Class="_e-SvoHVsEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_vhnikHVtEeSWm4eA3mEYSg" text="If no initial Pseudostate is defined, there is no single approach defined. One alternative is to treat such a model as ill formed. A second alternative is to treat the composite State as a simple State, terminating the traversal on that State despite its internal parts. (p.324)" id="Entering_004" base_Class="_vhmUcHVtEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_DAcSwHVuEeSWm4eA3mEYSg" text="If the incoming Transition or its continuations terminate on a directly contained substate of the composite State, then that substate becomes active and its entry Behavior is executed after the execution of the entry Behavior of the containing composite State. This rule applies recursively if the Transition terminates on an indirect (deeply nested) substate. (p.324)" id="Entering_005" base_Class="_DAbEoHVuEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_TqCiQHVuEeSWm4eA3mEYSg" text="The rule for this case is the same as for shallow history except that the target Pseudostate is of type deepHistory and the rule is applied recursively to all levels in the active state configuration below this one. (p.324)" id="Entering_006" base_Class="_TqBUIHVuEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_wExdgHVuEeSWm4eA3mEYSg" text="Rules described in req Entering_006 do not apply in the case where the most recently active substate is the FinalState, or this is the first entry into this State. In the latter two cases, if a default shallow history Transition is defined originating from the shallowHistory Pseudostate, it will be taken. Otherwise, default State entry is applied. (p.324)" id="Entering_007" base_Class="_wEwPYHVuEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_XM2sQHVvEeSWm4eA3mEYSg" text="The rule for this case is the same as for shallow history except that the target Pseudostate is of type deepHistory and the rule is applied recursively to all levels in the active state configuration below this one. (p.324)" id="Entering_008" base_Class="_XM1eIHVvEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_4ripkHVvEeSWm4eA3mEYSg" text="If a Transition enters a composite State through an entryPoint Pseudostate, then the effect Behavior associated with the outgoing Transition originating from the entry point and penetrating into the State (but after the entry Behavior of the composite State has been executed). (p.324)" id="Entering_009" base_Class="_4rhbcHVvEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_HmgNAHVwEeSWm4eA3mEYSg" text="If the composite State is also an orthogonal State with multiple Regions, each of its Regions is also entered, either by default or explicitly. (p.324)" id="Entering_010" base_Class="_Hme-4HVwEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_TUOYYHVwEeSWm4eA3mEYSg" text="If the Transition terminates on the edge of the composite State (i.e., without entering the State), then all the Regions are entered using the default entry rule above. (p.324)" id="Entering_011" base_Class="_TUNxUHVwEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_au6oUHVwEeSWm4eA3mEYSg" text="If the Transition explicitly enters one or more Regions (in case of a fork), these Regions are entered explicitly and the others by default. (p.324)" id="Entering_012" base_Class="_au5aMHVwEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_HU64UHVxEeSWm4eA3mEYSg" text="Regardless of how a State is entered, the StateMachine is deemed to be “in” that State even before any entry Behavior or effect Behavior (if defined) of that State start executing. (p.324)" id="Entering_013" base_Class="_HU5qMHVxEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_8tJ5UHV5EeSWm4eA3mEYSg" text="When exiting a State, regardless of whether it is simple or composite, the final step involved in the exit, after all other Behaviors associated with the exit are completed, is the execution of the exit Behavior of that State. (p.324)" id="Exiting_001" base_Class="_8tIrMHV5EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_UQ-wAHV6EeSWm4eA3mEYSg" text="If the State has a doActivity Behavior that is still executing when the State is exited, that Behavior is aborted before the exit Behavior commences execution. (p.324)" id="Exiting_002" base_Class="_UQ9h4HV6EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_1nUpoHV6EeSWm4eA3mEYSg" text="When exiting from a composite State, exit commences with the innermost State in the active state configuration. This means that exit Behaviors are executed in sequence starting with the innermost active State. (p.324)" id="Exiting_003" base_Class="_1nTbgHV6EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_7N20UHV6EeSWm4eA3mEYSg" text="If the exit occurs through an exitPoint Pseudostate, then the exit Behavior of the State is executed after the effect Behavior of the Transition terminating on the exit point. (p.324)" id="Exiting_004" base_Class="_7N1mMHV6EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_VnL4gHV7EeSWm4eA3mEYSg" text="When exiting from an orthogonal State, each of its Regions is exited. After that, the exit Behavior of the State is executed. (p.324)" id="Exiting_005" base_Class="_VnKqYHV7EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_cxp7IHV7EeSWm4eA3mEYSg" text="Regardless of how a State is exited, the StateMachine is deemed to have “left” that State only after the exit Behavior (if defined) of that State has completed execution. (p.325)" id="Exiting_006" base_Class="_cxotAHV7EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_jBfPkHV9EeSWm4eA3mEYSg" text="Entry points represent termination points (sources) for incoming Transitions and origination points (targets) for Transitions that terminate on some internal Vertex of the composite State. In effect, the latter is a continuation of the external incoming Transition, with the proviso that the execution of the entry Behavior of the composite State (if defined) occurs between the effect Behavior of the incoming Transition and the effect Behavior of the outgoing Transition. (p.325" id="Encaps_001" base_Class="_jBeogHV9EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_Dawc8HV-EeSWm4eA3mEYSg" text="If there is no outgoing Transition inside the composite State, then the incoming Transition simply performs a default State entry. (p.325)" id="Encaps_002" base_Class="_DavO0HV-EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_UgG0UHV-EeSWm4eA3mEYSg" text="Exit points are the inverse of entry points. That is, Transitions originating from a Vertex within the composite State can terminate on the exit point. In a well-formed model, such a Transition should have a corresponding external Transition outgoing from the same exit point, representing a continuation of the terminating Transition. If the composite State has an exit Behavior defined, it is executed after any effect Behavior of the incoming inside Transition and before any effect Behavior of the outgoing external Transition. (p.325)" id="Encaps_003" base_Class="_UgE_IHV-EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_kBXtUHV_EeSWm4eA3mEYSg" text="Entering via an entry point implies that the entry Behavior of the composite state is executed, followed by the Transition from the entry point to the target Vertex within the composite State. (p.325)" id="Sub_001" base_Class="_kBXGQHV_EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_QixNUHWEEeSWm4eA3mEYSg" text="Any guards associated with these entry point Transitions must evaluate to true in order for the specification to be well formed (p.325)" id="Sub_002" base_Class="_QivYIHWEEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_t4ZDgHWEEeSWm4eA3mEYSg" text="a submachine Statemachine can be exited as a result of reaching its FinalState, triggering of a group Transition originating from a submachine State, or via any of its exit points. Exiting via a FinalState or by a group Transition has the same meaning as for ordinary composite States. (p.325 - 326)" id="Sub_003" base_Class="_t4X1YHWEEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_jTUs0HWFEeSWm4eA3mEYSg" text="the Regions of the submachine StateMachine are entered through the corresponding entryPoint Pseudostates. (p.326)" id="Connect_001" base_Class="_jTS3oHWFEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_zQQqoHWFEeSWm4eA3mEYSg" text="When a Region of the submachine StateMachine reaches the corresponding exit point, the submachine state is exited via this exit point. (p.326)" id="Connect_002" base_Class="_zQPcgHWFEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_SVtfsHWGEeSWm4eA3mEYSg" text="FinalState is a special kind of State signifying that the enclosing Region has completed. Thus, a Transition to a FinalState represents the completion of the behaviors of the Region containing the FinalState. (p.326)" id="Final_001" base_Class="_SVrqgHWGEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_0XN2MHWGEeSWm4eA3mEYSg" text="a Transition terminating on this Pseudostate implies restoring the Region to that same state configuration, but with all the semantics of entering a State (see the Subclause describing State entry). The entry Behaviors of all States in the restored state configuration are performed in the appropriate order starting with the outermost State. (p.326)" id="History_005" base_Class="_0XMBAHWGEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_HLhCsHWHEeSWm4eA3mEYSg" text="represents the most recent active substate of its containing Region, but not the substates of that substate. A Transition terminating on this Pseudostate implies restoring the Region to that substate with all the semantics of entering a State. A single outgoing Transition from this Pseudostate may be defined terminating on a substate of the composite State. This substate is the default shallow history state of the composite State. (p.326)" id="History_006" base_Class="_HLfNgHWHEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_dW-YQHWHEeSWm4eA3mEYSg" text="all incoming Transitions have to complete before execution can continue through an outgoing Transition. (p.327)" id="Join_001" base_Class="_dW78AHWHEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_a8p1cHWIEeSWm4eA3mEYSg" text="Junction pseudo state can be used to split an incoming Transition into multiple outgoing Transition segments with different guard Constraints. Such guard Constraints are evaluated before any compound transition containing this Pseudostate is executed (p.327)" id="Join_002" base_Class="_a8onUHWIEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_z7Yj4HWIEeSWm4eA3mEYSg" text="It may happen that, for a particular compound transition, the configuration of Transition paths and guard values is such that the compound transition is prevented from reaching a valid state configuration. In those cases, the entire compound transition is disabled even though its Triggers are enabled. (p.327)" id="Join_003" base_Class="_z7XVwHWIEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_8btmMHWIEeSWm4eA3mEYSg" text="If more than one guard evaluates to true, one of these is chosen. The algorithm for making this selection is not defined. (p.327)" id="Join_004" base_Class="_8brxAHWIEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_ylWIkHWJEeSWm4eA3mEYSg" text="the guard Constraints on all outgoing Transitions are evaluated dynamically, when the compound transition traversal reaches this Pseudostate (p.327)" id="Choice_001" base_Class="_ylUTYHWJEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_HHhMIHWKEeSWm4eA3mEYSg" text="If more than one guard evaluates to true, one of the corresponding Transitions is selected. The algorithm for making this selection is not defined. (p.327)" id="Choice_002" base_Class="_HHf-AHWKEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_REDGsHWKEeSWm4eA3mEYSg" text="If none of the guards evaluates to true, then the model is considered ill formed. To avoid this, it is recommended to define one outgoing Transition with the predefined “else” guard for every choice Pseudostate. (p.327)" id="Choice_003" base_Class="_REB4kHWKEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_gaQNsHYkEeSWm4eA3mEYSg" text="If the owning State has an associated entry Behavior, this Behavior is executed before any behavior associated with the outgoing Transition. (p.327)" id="Entry_001" base_Class="_gaO_kHYkEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_9UMNcHYkEeSWm4eA3mEYSg" text="[In addition to Entry_001] If multiple Regions are involved, the entry point acts as a fork Pseudostate." id="Entry_002" base_Class="_9UK_UHYkEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_dtXUMHYlEeSWm4eA3mEYSg" text="Transitions terminating on an exit point within any Region of the composite State or a StateMachine referenced by a submachine State implies exiting of this composite State or submachine State (with execution of its associated exit Behavior). (p.327)" id="Exit_001" base_Class="_dtWGEHYlEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_2O2tAHYlEeSWm4eA3mEYSg" text="If multiple Transitions from orthogonal Regions within the State terminate on this Pseudostate, then it acts like a join Psuedostate. (p.327)" id="Exit_002" base_Class="_2O1e4HYlEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_Ay0bAHYmEeSWm4eA3mEYSg" text="Entering a terminate Pseudostate implies that the execution of the StateMachine is terminated immediately. The StateMachine does not exit any States nor does it perform any exit Behaviors. (p.327)" id="Terminate_001" base_Class="_AyzM4HYmEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_JZ17MHYmEeSWm4eA3mEYSg" text="Any executing doActivity Behaviors are automatically aborted. Entering a terminate Pseudostate is equivalent to invoking a DestroyObjectAction. (p.327)" id="Terminate_002" base_Class="_JZ0tEHYmEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_lE7swHYnEeSWm4eA3mEYSg" text="It may have an associated effect Behavior, which is executed when the Transition is traversed (executed). (p.328)" id="Transition_001" base_Class="_lE6eoHYnEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_xSP-MHYnEeSWm4eA3mEYSg" text="The duration of a Transition traversal is undefined, allowing for different semantic interpretations, including both “zero” and non-“zero” time. (p.328)" id="Transition_002" base_Class="_xSOwEHYnEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_L620gHYoEeSWm4eA3mEYSg" text="Transitions are executed as part of a more complex compound transition that takes a StateMachine execution from one stable state configuration to another (p.328)" id="Transition_003" base_Class="_L61mYHYoEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_VLXWkHYoEeSWm4eA3mEYSg" text="A transition is said to be reached, when execution of its StateMachine execution has reached its source Vertex (i.e., its source State is in the active state configuration)  (p.328)" id="Transition_004" base_Class="_VLWIcHYoEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_VrMtMHYoEeSWm4eA3mEYSg" text="A transition is said to be traversed, when it is being executed (along with any associated effect Behavior) (p.328)" id="Transition_005" base_Class="_VrLfEHYoEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_WQhAwHYoEeSWm4eA3mEYSg" text="A transition is said to be completed, after it has reached its target Vertex (p.328)" id="Transition_006" base_Class="_WQfLkHYoEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_9_11sHYoEeSWm4eA3mEYSg" text="A Transition may own a set of Triggers, each of which specifies an Event whose occurrence, when dispatched, may trigger traversal of the Transition. (p.328)" id="Transition_007" base_Class="_9_0nkHYoEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_WbGNMHY1EeSWm4eA3mEYSg" text="A Transition trigger is said to be enabled if the dispatched Event occurrence matches its Event type (p.328)" id="Transition_008" base_Class="_WbFmIHY1EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_dir68HY1EeSWm4eA3mEYSg" text="When multiple triggers are defined for a Transition, they are logically disjunctive, that is, if any of them are enabled, the Transition will be triggered. (p.328" id="Transition_009" base_Class="_diqFwHY1EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_xW0MwHY1EeSWm4eA3mEYSg" text="kind = external means that the Transition exits its source Vertex. If the Vertex is a State, then executing this Transition will result in the execution of any associated exit Behavior of that State. (p.328)" id="Transition_010" base_Class="_xWy-oHY1EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_x0jRoHY1EeSWm4eA3mEYSg" text="kind = local is the opposite of external, meaning that the Transition does not exit its containing State (and, hence, the exit Behavior of the containing State will not be executed). (p.328)" id="Transition_011" base_Class="_x0iDgHY1EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_ybjAMHY1EeSWm4eA3mEYSg" text="kind = internal is a special case of a local Transition that is a self-transition (i.e., with the same source and target States), such that the State is never exited (and, thus, not re-entered), which means that no exit or entry Behaviors are executed when this Transition is executed. (p.328)" id="Transition_012" base_Class="_ybhyEHY1EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_Y7ESwHY5EeSWm4eA3mEYSg" text="Transitions whose source Vertex is a composite States are called high-level or group Transitions. If they are external, group Transitions result in the exiting of all substates of the composite State, executing any defined exit Behaviors starting with the innermost States in the active state configuration. (p.328)" id="Transition_013" base_Class="_Y7CdkHY5EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_eNwUYHY5EeSWm4eA3mEYSg" text="In case of local Transitions, the exit Behaviors of the source State and the entry Behaviors of the target State will be executed, but not those of the containing State. (p.328)" id="Transition_014" base_Class="_eNvGQHY5EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_pl_X8HY5EeSWm4eA3mEYSg" text="In case of simple States, a completion event is generated when the associated entry and doActivity Behaviors have completed executing. (p.328)" id="Transition_015" base_Class="_pl-J0HY5EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_7d0VIHY5EeSWm4eA3mEYSg" text="If no such Behaviors are defined, the completion event is generated upon entry into the State. (p.328)" id="Transition_016" base_Class="_7dzHAHY5EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_HxTgAHY6EeSWm4eA3mEYSg" text="For composite States, a completion event is generated under the following circumstances:  All internal activities (e.g., entry and doActivity Behaviors) have completed execution, and all its orthogonal Regions have reached a FinalState. (p.328 - 329)" id="Transition_017" base_Class="_HxSR4HY6EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_ipGo4HY6EeSWm4eA3mEYSg" text="For submachine States, a completion event is generated under the following circumstances: All internal activities (e.g., entry and doActivity Behaviors) have completed execution, and the submachine StateMachine execution has reached a FinalState. (p.328 - 329)" id="Transition_018" base_Class="_ipFawHY6EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_yBJw8HY6EeSWm4eA3mEYSg" text="Completion events have dispatching priority. That is, they are dispatched ahead of any pending Event occurrences in the event pool. (p.329)" id="Transition_019" base_Class="_yBIi0HY6EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_6ZjmUHY6EeSWm4eA3mEYSg" text="If two or more completion events corresponding to multiple orthogonal Regions occur simultaneously (i.e., as a result of the same Event occurrence), the order in which such completion occurrences are processed is not defined (p.329)" id="Transition_020" base_Class="_6ZiYMHY6EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_P9oy0HY7EeSWm4eA3mEYSg" text="Completion of all top level Regions in a StateMachine corresponds to a completion of the Behavior of the StateMachine and results in its termination. (p.329)" id="Transition_021" base_Class="_P9nksHY7EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_d6OCcHY7EeSWm4eA3mEYSg" text="A Transition may have an associated guard Constraint. Transitions that have a guard which evaluates to false are disabled. (p.329)" id="Transition_022" base_Class="_d6NbYHY7EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_nAJsMHY7EeSWm4eA3mEYSg" text="Guards are evaluated before the compound transition that contains them is enabled, unless they are on Transitions that originate from a choice Pseudostate (p.329)" id="Transition_023" base_Class="_nAH3AHY7EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_sznfoHY7EeSWm4eA3mEYSg" text="In the latter case, the guards are evaluated when the choice point is reached (p.329)" id="Transition_024" base_Class="_szlqcHY7EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_1wJ80HY7EeSWm4eA3mEYSg" text="A Transition that does not have an associated guard is treated as if it has a guard that is always true. (p.329)" id="Transition_025" base_Class="_1wIusHY7EeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_P0lLMHZAEeSWm4eA3mEYSg" text="Branching in a compound transition execution occurs whenever an executing Transition performs a default entry into a State with multiple orthogonal Regions, with a separate branch created for each Region, or when a fork Pseudostate is encountered. The overall behavior that results from the execution of a compound transition is a partially ordered set of executions of Behaviors associated with the traversed elements, determined by the order in which the elements (Vertices and Transitions) are encountered. (p.329)" id="Transition_026" base_Class="_P0j9EHZAEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_U2WmgHZBEeSWm4eA3mEYSg" text="If a choice or join point is reached with multiple outgoing Transitions with guards, a Transition whose guard evaluates to true will be taken. If more than one guard evaluates to true, one of these Transitions is chosen for continuing the traversal. The algorithm for making this selection is undefined. (p.329)" id="Transition_027" base_Class="_U2VYYHZBEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_M9UGUHZEEeSWm4eA3mEYSg" text="Upon creation, a StateMachine will perform its initialization during which it executes an initial compound transition prompted by the creation, after which it enters a wait point. In case of StateMachine Behaviors, a wait point is represented by a stable state configuration. It remains thus until an Event stored in its event pool is dispatched (p.330)" id="Event_001" base_Class="_M9SRIHZEEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_dBf7oHZEEeSWm4eA3mEYSg" text="This Event is evaluated and, if it matches a valid Trigger of the StateMachine and there is at least one enabled Transition that can be triggered by that Event occurrence, a single StateMachine step is executed. (p.330)" id="Event_002" base_Class="_dBdfYHZEEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_TPq_wHZFEeSWm4eA3mEYSg" text="A step involves executing a compound transition and terminating on a stable state configuration (i.e., the next wait point). (p.330)" id="Event_003" base_Class="_TPpxoHZFEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_yo7hoHZFEeSWm4eA3mEYSg" text="it is possible for multiple mutually exclusive Transitions in a given Region to be enabled for firing by the same Event occurrence. In those cases, only one is selected and executed. Which of the enabled Transitions is chosen is determined by the Transition selection algorithm described below. (p.330) The set of Transitions that will fire are the Transitions in the Regions of the current state configuration that satisfy the following conditions: All Transitions in the set are enabled. There are no conflicting Transitions within the set. There is no Transition outside the set that has higher priority than a Transition in the set (that is, enabled Transitions with highest priorities are in the set while conflicting Transitions with lower priorities are left out)." id="Event_004" base_Class="_yo5scHZFEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_4l094HZFEeSWm4eA3mEYSg" text="StateMachines can respond to any of the Event types described in Clause 13 as well as to completion events (p.330)" id="Event_005" base_Class="_4lzIsHZFEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_DXwPYHZGEeSWm4eA3mEYSg" text="Event occurrences are detected, dispatched, and processed by the StateMachine execution, one at a time. (p.330)" id="Event_006" base_Class="_DXvBQHZGEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_T8f0EHZGEeSWm4eA3mEYSg" text="Run-to-completion means that, in the absence of exceptions or asynchronous destruction of the context Classifier object or the StateMachine execution, a pending Event occurrence is dispatched only after the processing of the previous occurrence is completed and a stable state configuration has been reached. That is, an Event occurrence will never be dispatched while the StateMachine execution is busy processing the previous one. (p.330)" id="Event_007" base_Class="_T8el8HZGEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_ZbVwcHZIEeSWm4eA3mEYSg" text="When an Event occurrence is detected and dispatched, it may result in one or more Transitions being enabled for firing. If no Transition is enabled and the corresponding Event type is not in any of the deferrableTriggers lists of the active state configuration, the dispatched Event occurrence is discarded and the run-to-completion step is completed trivially. (p.330)" id="Event_008" base_Class="_ZbVJYHZIEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="__hg2QHZIEeSWm4eA3mEYSg" text="it is possible that multiple Transitions (in different Regions) can be triggered by the same Event occurrence. The order in which these Transitions are executed is left undefined. (p.330)" id="Event_009" base_Class="__hfBEHZIEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_PLPkMHZJEeSWm4eA3mEYSg" text="it is possible for multiple mutually exclusive Transitions in a given Region to be enabled for firing by the same Event occurrence. In those cases, only one is selected and executed. Which of the enabled Transitions is chosen is determined by the Transition selection algorithm described below. (p.330)" id="Event_010" base_Class="_PLNvAHZJEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_cgZAYHZJEeSWm4eA3mEYSg" text="When all orthogonal Regions have finished executing the Transition, the current Event occurrence is fully consumed, and the run-to-completion step is completed. (p.330)" id="Event_011" base_Class="_cgXyQHZJEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_qxegYHZJEeSWm4eA3mEYSg" text="it is possible for multiple mutually exclusive Transitions in a given Region to be enabled for firing by the same Event occurrence. In those cases, only one is selected and executed. Which of the enabled Transitions is chosen is determined by the Transition selection algorithm described below. (p.330) The set of Transitions that will fire are the Transitions in the Regions of the current state configuration that satisfy the following conditions: All Transitions in the set are enabled. There are no conflicting Transitions within the set. There is no Transition outside the set that has higher priority than a Transition in the set (that is, enabled Transitions with highest priorities are in the set while conflicting Transitions with lower priorities are left out). (p.331-332)" id="Event_012" base_Class="_qxcrMHZJEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_1NN0kHZLEeSWm4eA3mEYSg" text="During a Transition, a number of actions Behaviors may be executed. If such a Behavior includes a synchronous invocation call on another object executing a StateMachine, then the Transition step is not completed until the invoked object method completes its run-to-completion step. (p.330)" id="Event_013" base_Class="_1NL_YHZLEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_Q-EFUHZMEeSWm4eA3mEYSg" text="A Transition is enabled if and only if: 1 All of its source States are in the active state configuration. 2 At least one of the triggers of the Transition has an Event that is matched by the Event type of the dispatched Event occurrence. In case of Signal Events, any occurrence of the same or compatible type as specified in the Trigger will match. If one of the Triggers is for an AnyReceiveEvent, then either a Signal or CallEvent satisfies this Trigger, provided that there is no other Signal or CallEvent Trigger for the same Transition or any other Transition having the same source Vertex as the Transition with the AnyReceiveEvent trigger (see also 13.3.1). 3 If there exists at least one full path from the source state configuration to either the target state configuration or to a dynamic choice Pseudostate in which all guard conditions are true (Transitions without guards are treated as if their guards are always true). (p.331)" id="Event_014" base_Class="_Q-C3MHZMEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_CAYIkHZNEeSWm4eA3mEYSg" text="It is possible for more than one Transition to be enabled within a StateMachine. If that happens, then such Transitions may be in conflict with each other. For example, consider the case of two Transitions originating from the same State, triggered by the same event, but with different guards. If that event occurs and both guard conditions are true, then at most one of those Transition can fire in a given run-to-completion step. (p.331)" id="Event_015" base_Class="_CAWTYHZNEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_gm-ecHZNEeSWm4eA3mEYSg" text="In situations where there are conflicting Transitions, the selection of which Transitions will fire is based in part on an implicit priority. These priorities resolve some but not all Transition conflicts, as they only define a partial ordering. The priorities of conflicting Transitions are based on their relative position in the state hierarchy. By definition, a Transition originating from a substate has higher priority than a conflicting Transition originating from any of its containing States. The priority of a Transition is defined based on its source State. (p.331)" id="Event_016" base_Class="_gm8pQHZNEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_iXuqYHZNEeSWm4eA3mEYSg" text="The priority of Transitions chained in a compound transition is based on the priority of the Transition with the most deeply nested source State. (p.331)" id="Event_017" base_Class="_iXtcQHZNEeSWm4eA3mEYSg"/>
  <Requirements:Requirement xmi:id="_MtG7kHZOEeSWm4eA3mEYSg" text="Once a Transition is enabled and is selected to fire, the following steps are carried out in order:&#xD;&#xA;1. Starting with the main source State, the States that contain the main source State are exited according to the rules of State exit (or, composite State exit if the main source State is nested) as described earlier.&#xD;&#xA;2. The series of State exits continues until the first Region that contains, directly or indirectly, both the main source and main target states is reached. The Region that contains both the main source and main target states is called their least common ancestor. At that point, the effect Behavior of the Transition that connects the sub-configuration of source States to the sub-configuration of target States is executed. (A “sub-configuration” here refers to that subset of a full state configuration contained within the least common ancestor Region.)&#xD;&#xA;3. The configuration of States containing the main target State is entered, starting with the outermost State in the least common ancestor Region that contains the main target State. The execution of Behaviors follows the rules of State entry (or composite State entry) described earlier. (p.331)" id="Event_018" base_Class="_MtFtcHZOEeSWm4eA3mEYSg"/>
</xmi:XMI>
